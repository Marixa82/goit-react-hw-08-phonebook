{"version":3,"file":"static/js/106.05e2ed06.chunk.js","mappings":"mQAEMA,EAASC,EAAAA,EAAAA,OAAH,sgBAwBNC,EAAQD,EAAAA,EAAAA,MAAH,qGAMLE,EAAOF,EAAAA,EAAAA,KAAH,oMAWJG,EAAQH,EAAAA,EAAAA,MAAH,qTAeLI,EAAOJ,EAAAA,EAAAA,KAAH,8G,UCnDGK,EAAc,SAACC,GAC1B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAGMC,EAAmB,SAAAC,GACnB,MAAsBA,EAAMC,OAArBN,EAAP,EAAOA,KAAMO,EAAb,EAAaA,MACnB,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MACF,IAAK,QACHJ,EAAUI,GACV,MACF,QACE,OAEH,EACKC,ECNK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAON,CACR,CDVYS,GAaLC,EAAY,WAChBjB,EAAQ,IACRE,EAAU,GACb,EAEKgB,EAAe,WACnB,IAAQC,EAAkBtB,EAAlBsB,cACR,OAAKpB,GAASE,EAIPkB,EAAcpB,IAHnBqB,MAAM,wBACC,EAGV,EAEC,OACE,UAAC3B,EAAD,CAAM4B,SA1Ba,SAACC,GACtBA,EAAEC,iBACF,IAAQC,EAAU3B,EAAV2B,MACiBN,MAGvBM,EAAM,CAAEjB,GAAAA,EAAIR,KAAAA,EAAME,OAAAA,IAClBgB,IAEH,EAiBG,WACE,UAACzB,EAAD,CAAOiC,QAASlB,EAAhB,WACE,SAACZ,EAAD,UAAM,YACN,SAACD,EAAD,CACEgC,KAAK,OACL3B,KAAK,OACLO,MAAOP,EACP4B,YAAY,qBACZC,SAAUzB,EACVI,GAAIA,EACJsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAEZ,UAACvC,EAAD,CAAOiC,QAAQ,GAAf,WACE,SAAC9B,EAAD,UAAM,cACN,SAACD,EAAD,CACEgC,KAAK,MACL3B,KAAK,QACLO,MAAOL,EACP0B,YAAY,uBACZC,SAAUzB,EACV0B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAEZ,SAACzC,EAAD,CAAQoC,KAAK,SAAb,SAAsB,kBAI3B,E,UEjFYM,EAAKzC,EAAAA,EAAAA,GAAH,0ICAF0C,EAAK1C,EAAAA,EAAAA,GAAH,kNAUFD,EAASC,EAAAA,EAAAA,OAAH,wgBA0BNI,EAAOJ,EAAAA,EAAAA,KAAH,+HCnCJ2C,EAAkB,SAAC,GAAsC,IAApC3B,EAAmC,EAAnCA,GAAIR,EAA+B,EAA/BA,KAAME,EAAyB,EAAzBA,OAAQkC,EAAiB,EAAjBA,WAC5C,OACA,UAACF,EAAD,YACG,SAAC,EAAD,WAAM,uBAAIlC,MAAgB,KAAC,uBAAG,MAAK,MAAE,SAAC,EAAD,UAAOE,KAC3C,SAAC,EAAD,CAAQyB,KAAK,SAASU,QAAS,kBAAKD,EAAW5B,EAAhB,EAA/B,SAAoD,aAG/D,ECNY8B,EAAc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOH,EAAiB,EAAjBA,WACjC,OAAkB,IAAfG,EAAMC,OAAmB,MAExB,SAACP,EAAD,UACKM,EAAME,KAAI,SAAAC,GACP,IAAQlC,EAAOkC,EAAPlC,GACR,OACI,SAAE2B,GAAF,kBAEIO,GAFJ,IAGJN,WAAYA,IAFC5B,EAGhB,KAIR,ECjBCb,EAAQH,EAAAA,EAAAA,MAAH,oSAYLI,EAAOJ,EAAAA,EAAAA,KAAH,8GAMJC,EAAQD,EAAAA,EAAAA,MAAH,qKASLmD,EAAMnD,EAAAA,EAAAA,IAAH,2DCzBKoD,EAAS,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQhB,EAAc,EAAdA,SACzB,OACI,SAACc,EAAD,WACI,UAAC,EAAD,YACI,SAAC,EAAD,UAAM,0BACV,SAAC,EAAD,CAAOhB,KAAK,OACZ3B,KAAK,SACLO,MAAOsC,EACPhB,SAAU,gBAAEvB,EAAF,EAAEA,OAAF,OAAeuB,EAASvB,EAAOC,MAA/B,EACVqB,YAAY,8BAKvB,E,oBChBQkB,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,SAAST,KAA5B,EACtBU,EAAkB,SAAAF,GAAK,OAAIA,EAAMC,SAASA,SAASE,SAA5B,EACvBC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,SAASA,SAASI,KAA5B,EACnBC,EAAe,SAAAN,GAAK,OAAIA,EAAMC,SAASH,MAAnB,E,SCmDjC,EA7CoB,WAChB,IAAMS,GAAWC,EAAAA,EAAAA,MACXP,GAAWQ,EAAAA,EAAAA,IAAYV,GACvBD,GAASW,EAAAA,EAAAA,IAAYH,GACrBH,GAAYM,EAAAA,EAAAA,IAAYP,GACxBG,GAAQI,EAAAA,EAAAA,IAAYL,IAO1BM,EAAAA,EAAAA,YAAU,WACNH,GAASI,EAAAA,EAAAA,MACZ,GAAE,CAACJ,IAoBJ,OACI,UAAC,KAAD,YACI,SAAC,KAAD,UAAO,eACP,SAACzD,EAAD,CAAa4B,MA9BI,SAACkC,GACtBL,GAASM,EAAAA,EAAAA,IAAWD,GACvB,EA4B6CvC,cArBb,SAACpB,GAC9B,IAAM6D,IAAkBb,EAASc,MAAK,SAACpB,GAAD,OAAUA,EAAK1C,OAASA,CAAxB,IAEtC,OADA6D,GAAiBxC,MAAM,GAAD,OAAIrB,EAAJ,0BACd6D,CACX,KAkBO,SAAC,EAAAE,GAAD,UAAI,cACJ,SAACnB,EAAD,CAAQC,OAAQA,EAAQhB,SARL,SAACN,GACxB+B,GAASU,EAAAA,EAAAA,GAAUzC,GACtB,IAOQ2B,IAAcE,IAAS,uBAAG,4BAC3B,SAACd,EAAD,CAAaC,MAlBVS,EAASH,QAAO,SAAAH,GAAI,OACvBA,EAAK1C,KAAKiE,cAAcC,SAAUrB,GAAUA,EAAOoB,eAAkB,GAD9C,IAkBkB7B,WAdxB,SAAC5B,GACtB8C,GAASa,EAAAA,EAAAA,IAAc3D,GAC1B,MAeJ,C","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactListItem.styled.js","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","redux/contacts/selectors.js","views/ContactView.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Button = styled.button`\n  background: linear-gradient(\n    to right, \n     #e9d362 0%,\n    #333333 51%, \n    #e9d362 100%);\n  margin: 10px;\n  padding: 10px 25px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`\nconst Label = styled.label`\nfont-weight: bold;\nfont-size: 20px;\ndisplay:flex;\nflex-direction:column;\n`\nconst Form = styled.form`\nmax-width:400px;\nborder: 2px solid black;\n\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\nbackground-image: linear-gradient(to right, #EFEFBB 0%, #FFFFFF 51%, #e9d362 100%);\n&:active {\n    background-position: right center;\n    color: #000;\n    text-decoration: none;\n  }\n`\n\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\n\nexport { Input, Form, Label, Button, Span }","import { Button, Input, Label, Form, Span} from \"./ContactForm.styled\";\nimport {  useState } from \"react\";\nimport { nanoid } from 'nanoid'\nimport PropTypes from 'prop-types';\n\n\n\nexport const ContactForm = (props) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n \n  const handleChangeForm = event => {\n        const {name, value} = event.target\n  switch (name) {\n    case 'name':\n      setName(value);\n      break;\n    case 'phone':\n      setNumber(value);\n      break;\n    default:\n      return;\n  }\n  }\n  const id = nanoid();\n  \n  const handelSubmit = (e) => {\n  e.preventDefault();\n  const { onAdd } = props;\n   const isValidatedForm = validateForm();\n\n  if (isValidatedForm) {\n    onAdd({ id, name, number });\n    resetForm();\n  }\n};\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n} \n\nconst validateForm = () => {\n  const { onCheckUnique } = props;\n  if (!name || !number) {\n    alert('Some field is empty');\n    return false;\n  }\n  return onCheckUnique(name);\n};\n\n  return (\n    <Form onSubmit={handelSubmit}>\n      <Label htmlFor={id}>\n        <Span>Name :</Span>\n        <Input\n          type=\"text\"\n          name='name'\n          value={name}\n          placeholder=\"Enter contact name\"\n          onChange={handleChangeForm}\n          id={id}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required  />\n      </Label>\n      <Label htmlFor=\"\">\n        <Span>Number :</Span>\n        <Input\n          type=\"tel\"\n          name='phone'\n          value={number}\n          placeholder=\"Enter contact number\"\n          onChange={handleChangeForm}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required  \n        /></Label>\n      <Button type='submit'>Add contact</Button>\n    </Form>\n  );\n\n}\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  onCheckUnique: PropTypes.func.isRequired,\n};\n\n\n\n\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\ndisplay:flex;\nflex-direction:column;\nwidth: auto;\nbackground-color: rgba(0, 0, 0, 0.3);\nborder-radius: 10px;\n`","import styled from '@emotion/styled';\n\nexport const Li = styled.li`\nmax-width:400px;\ndisplay:flex;\njustify-content: space-between;\nmargin-bottom: 10px;\nalign-items: center;\n  gap: 5px;\n  color: #F5FFFA;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);`\n\nexport const Button = styled.button`\n\n background: linear-gradient(\n    to right, \n     #e9d362 0%,\n    #333333 51%, \n    #e9d362 100%);\n  margin: 10px;\n  padding: 5px 10px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  \n  }`\n\nexport const Span = styled.span`\n  font-weight: 400;\n  /* display: flex;\n  justify-content: flex-start; */\n  /* font-size: 15px; */\n`","import { Li, Span,Button } from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactListItem = ({ id, name, number, delContact }) => {\n        return (\n        <Li>\n           <Span><b>{name}</b></Span> <b>:</b>  <Span>{number}</Span>\n            <Button type=\"button\" onClick={()=> delContact(id)}>Delete</Button>\n        </Li>\n    )\n}\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  \n}","import PropTypes from 'prop-types';\nimport { Ul } from './ContactList.styled';\nimport {ContactListItem} from \"./ContactListItem\";\n\nexport const ContactList = ({ items, delContact }) => {\n    if(items.length===0) return null\n    return (\n        <Ul>\n            {items.map(item => {\n                const { id } = item\n                return (\n                    < ContactListItem\n                        key={id}\n                    {...item}\n                delContact={delContact} />)    \n            })}\n            \n            \n         </Ul>)\n    }\n    \n\n    ContactList.propTypes = {\n    items: PropTypes.array.isRequired,\n    delContact: PropTypes.func.isRequired,\n }\n","import styled from '@emotion/styled';\n\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\noutline:none;\nbackground-image: linear-gradient(to right, #EFEFBB 0%, #FFFFFF 51%, #e9d362 100%);\n&:active {\n    background-position: right center;\n    color: #000;\n    text-decoration: none;\n  }`\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\nconst Label = styled.label`\npadding: 20px;\nfont-weight: bold;\ndisplay:flex;\nflex-direction:column;\ngap:10px;\nalign-items:flex-start;\njustify-content: flex-start;\n`\nconst Div = styled.div`\ndisplay: flex;\ntext-align: center;`\nexport { Span, Label, Input, Div }","import { Input, Label, Span, Div } from './Filter.styled';\nimport PropTypes from 'prop-types';\n\n\nexport  const Filter = ({filter, onChange}) => {\n        return (\n            <Div>\n                <Label>\n                    <Span>Find contact by name</Span>\n                <Input type=\"text\" \n                name='filter'\n                value={filter}\n                onChange={({target})  => onChange(target.value)}\n                placeholder=\"Enter name for Search\"\n                    />\n                </Label>\n            </Div>\n        )\n    }\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n }","// import { setFilter } from \"./createSlice\";\n// import { createSelector } from \"@reduxjs/toolkit\";\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\n\n// export const selectVisibleContacts = createSelector(\n//     [selectFilter, selectContacts],\n//     (filter, items) => {\n//         return items.filter((item) =>\n//             item.name.toLowerCase().includes(filter.toLowerCase())\n//         );\n//     }\n// );\n\n\n\n","import { useEffect } from 'react';\nimport { Container, Title, H2 } from './views.styled';\n// import { Div } from '../components/App/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchContacts, addContact, deleteContact } from 'redux/contacts/operations';\nimport { selectFilter, selectContacts, selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/createSlice';\n\nconst ContactView = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts)\n    const filter = useSelector(selectFilter);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    const handleAddContact = (data) => {\n        dispatch(addContact(data));\n    };\n\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const handelCheckUniqueContact = (name) => {\n        const isNameContact = !!contacts.find((item) => item.name === name)\n        isNameContact && alert(`${name} is already in items`)\n        return !isNameContact\n    }\n\n    function getVisibleContact() {\n        return contacts.filter(item =>\n            item.name.toLowerCase().includes((filter && filter.toLowerCase()) || \"\")\n        );\n    }\n    const handleDelContact = (id) => {\n        dispatch(deleteContact(id));\n    };\n\n    const handleFilterChange = (e) => {\n        dispatch(setFilter(e));\n    };\n    return (\n        <Container>\n            <Title>Phonebook</Title>\n            <ContactForm onAdd={handleAddContact} onCheckUnique={handelCheckUniqueContact} />\n            <H2>Contacts</H2>\n            <Filter filter={filter} onChange={handleFilterChange} />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList items={getVisibleContact()} delContact={handleDelContact} />\n        </Container>\n    )\n}\nexport default ContactView;\n\n"],"names":["Button","styled","Label","Form","Input","Span","ContactForm","props","useState","name","setName","number","setNumber","handleChangeForm","event","target","value","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","resetForm","validateForm","onCheckUnique","alert","onSubmit","e","preventDefault","onAdd","htmlFor","type","placeholder","onChange","pattern","title","required","Ul","Li","ContactListItem","delContact","onClick","ContactList","items","length","map","item","Div","Filter","filter","selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectFilter","dispatch","useDispatch","useSelector","useEffect","fetchContacts","data","addContact","isNameContact","find","H2","setFilter","toLowerCase","includes","deleteContact"],"sourceRoot":""}