{"version":3,"file":"static/js/684.cfc4d788.chunk.js","mappings":"oMAKMA,EAAgCC,EAAAA,KAAaC,MAAM,CACrDC,SAAUF,EAAAA,KACLG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACdC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,YACpDE,SAAUP,EAAAA,KACLG,IAAI,EAAG,cACPK,QAAQ,QAAS,QAAS,KAAM,SAChCH,SAAS,cAiElB,UA/DqB,WACjB,IAAMI,GAAWC,EAAAA,EAAAA,MAEjB,OAEI,UAAC,KAAD,YACI,SAAC,KAAD,UAAO,kBACP,SAAC,KAAD,CACIC,cAAe,CACXT,SAAU,GACVI,MAAO,GACPC,SAAU,IAEdK,iBAAkBb,EAClBc,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACjBN,EAASO,EAAAA,GAAAA,SAAwBF,IACjCC,GACH,EAVL,SAYK,gBAAGD,EAAH,EAAGA,OAAQG,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,aAAtD,OACG,UAAC,KAAD,CAAWR,SAAUQ,EAArB,WACI,SAAC,KAAD,CACIC,KAAK,WACLC,KAAK,OACLC,SAAUL,EACVM,MAAOX,EAAOZ,SACdwB,OAAQN,EACRO,YAAY,qBACZC,UAAWX,EAAOf,UAAYgB,EAAQhB,SAAW,cAAgB,KAEpEgB,EAAQhB,UAAYe,EAAOf,WAAY,SAAC,KAAD,UAAQe,EAAOf,YAEvD,SAAC,KAAD,CACIoB,KAAK,QACLC,KAAK,QACLC,SAAUL,EACVM,MAAOX,EAAOR,MACdoB,OAAQN,EACRO,YAAY,sBACZC,UAAWX,EAAOX,OAASY,EAAQZ,MAAQ,cAAgB,KAE9DY,EAAQZ,OAASW,EAAOX,QAAS,SAAC,KAAD,UAAQW,EAAOX,SAEjD,SAAC,KAAD,CACIgB,KAAK,WACLC,KAAK,WACLC,SAAUL,EACVM,MAAOX,EAAOP,SACdmB,OAAQN,EACRO,YAAY,yBACZC,UAAWX,EAAOV,UAAYW,EAAQX,SAAW,cAAgB,KAEpEW,EAAQX,UAAYU,EAAOV,WAAY,SAAC,KAAD,UAAQU,EAAOV,YAEvD,SAAC,KAAD,CAAagB,KAAK,SAAlB,SAA2B,eAnClC,MA2ChB,C,8VC1EKM,GAAYC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,0OAYTE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,0OAwBTI,EAAcJ,EAAAA,EAAAA,OAAH,yWAmBXK,EAAML,EAAAA,EAAAA,IAAH,iPAYHM,EAAIN,EAAAA,EAAAA,EAAH,qNAYDO,EAAQP,EAAAA,EAAAA,GAAH,iIAOLQ,EAAKR,EAAAA,EAAAA,GAAH,+HAOFS,EAAYT,EAAAA,EAAAA,IAAH,mGAOTU,GAAQV,EAAAA,EAAAA,GAAOW,EAAAA,GAAPX,CAAH,gMA0BLY,EAAOZ,EAAAA,EAAAA,KAAH,kJAUJa,EAAQb,EAAAA,EAAAA,IAAH,iH","sources":["views/RegisterView.js","views/views.styled.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { authOperations } from \"redux/auth\";\nimport { FormViews, FormField, ButtonViews, Title, Container, Input, Error } from \"./views.styled\";\nimport * as Yup from 'yup';\n\nconst DisplayingErrorMessagesSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .matches(/[a-z]/, /[A-Z]/, /\\s/, \"Error\")\n        .required('Required'),\n});\nconst RegisterView = () => {\n    const dispatch = useDispatch();\n\n    return (\n\n        <Container>\n            <Title>Registration</Title>\n            <FormViews\n                initialValues={{\n                    username: '',\n                    email: '',\n                    password: '',\n                }}\n                validationSchema={DisplayingErrorMessagesSchema}\n                onSubmit={(values, { resetForm }) => {\n                    dispatch(authOperations.register(values));\n                    resetForm();\n                }}\n            >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                    <FormField onSubmit={handleSubmit}>\n                        <Input\n                            name=\"username\"\n                            type=\"text\"\n                            onChange={handleChange}\n                            value={values.username}\n                            onBlur={handleBlur}\n                            placeholder=\"Enter your name...\"\n                            className={errors.username && touched.username ? \"input-error\" : \"\"}\n                        />\n                        {touched.username && errors.username && <Error>{errors.username}</Error>}\n\n                        <Input\n                            name=\"email\"\n                            type=\"email\"\n                            onChange={handleChange}\n                            value={values.email}\n                            onBlur={handleBlur}\n                            placeholder=\"Enter your email...\"\n                            className={errors.email && touched.email ? \"input-error\" : \"\"}\n                        />\n                        {touched.email && errors.email && <Error>{errors.email}</Error>}\n\n                        <Input\n                            name=\"password\"\n                            type=\"password\"\n                            onChange={handleChange}\n                            value={values.password}\n                            onBlur={handleBlur}\n                            placeholder=\"Enter your password...\"\n                            className={errors.password && touched.password ? \"input-error\" : \"\"}\n                        />\n                        {touched.password && errors.password && <Error>{errors.password}</Error>}\n\n                        <ButtonViews type=\"submit\">Register</ButtonViews>\n                    </FormField>\n                )}\n            </FormViews>\n\n\n        </Container>\n    )\n}\nexport default RegisterView;\n\n\n// const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const name = e.currentTarget.elements.userName.value;\n//     const email = e.currentTarget.elements.userEmail.value;\n//     const password = e.currentTarget.elements.userPassword.value;\n\n//     const formData = {\n//         name,\n//         email,\n//         password,\n//     };\n//     dispatch(authOperations.register(formData));\n//     console.log(name, email, password);\n// }\n/* <Title>Registration</Title>\n            <FormViews onSubmit={handleSubmit} autoComplete=\"off\">\n                <label>\n                    <span>\n                        <Input type=\"text\" name=\"userName\" placeholder=\"Enter your name...\" required></Input>\n                    </span>\n                </label>\n                <label>\n                    <span>\n                        <Input type=\"email\" name=\"userEmail\" placeholder=\"Enter your email...\" required />\n                    </span>\n                </label>\n                <label>\n                    <span>\n                        <Input type=\"password\" name=\"password\" required placeholder=\"Enter your password...\" minlength=\"6\" maxlength=\"12\" pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$\" title=\"Please include at least 1 uppercase character, 1 lowercase character, and 1 number.\" />\n                    </span>\n                </label>\n                <ButtonViews type=\"submit\">Register</ButtonViews>\n            </FormViews> */","import styled from '@emotion/styled';\nimport { Formik, Field, Form } from 'formik';\n\n\nconst FormViews = styled(Formik)`\ntext-align: center;\nmax-width:250px;\nborder: 1px solid black;\nmargin-left:20px;\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst FormField = styled(Form)`\ntext-align: center;\nmax-width:250px;\nborder: 1px solid black;\nmargin-left:20px;\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\n// const FormViews = styled.form`\n// text-align: center;\n// max-width:250px;\n// border: 1px solid black;\n// margin-left:20px;\n// padding:20px;\n// border-radius: 10px;\n// display:flex;\n// flex-direction:column;\n// gap:20px;\n// background-color: rgba(0, 0, 0, 0.3);\n// `\nconst ButtonViews = styled.button`\n  background-color: #333333;\n  margin: 10px;\n  padding: 10px 25px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }\n`;\n\nconst Div = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin-top: 20px;\nalign-items: center;\n/* text-align: center; */\ncolor: #F5FFFA;\nmargin-left: auto;\nmargin-right: auto;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst P = styled.p`\nbackground-color: rgba(0, 0, 0, 0.3);\nfont-weight: 500;\nmax-width: 200px; \nborder-radius: 10px;\npadding: 5px;\ntext-align: center;\nborder:1px solid black;\n&:hover{\ncolor: #e9d362;\n}`\n\nconst Title = styled.h1`\nfont-weight: 500;\nmargin: 15px 0px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst H2 = styled.h2`\nfont-weight: 400;\nmargin: 10px 0;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\n\n  `\nconst Container = styled.div`\n\n    display: flex;\nalign-items: center;\nflex-direction: column;\n    \n`\nconst Input = styled(Field)`\n font-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }\n `\n// const Input = styled.input`\n//  font-size: 10px;\n// width:200px;\n// height:20px;\n// border-radius: 5px;\n// border: none;\n// outline:none;\n\n// &:hover {\n//   background-color: #e9d362;\n//     color: #333333;\n//   }\n//  `\nconst Span = styled.span`\n margin-top: 15px;\n font-weight: 500;\n \n &:hover{\n\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\ncolor: #e9d362;\n}`\n\nconst Error = styled.div`\n  color: #fc8181;\n  font-size: 0.75rem;\n  text-align: left;\n  margin-top: 0.25rem;\n\n `\n\nexport { Container, Title, Div, ButtonViews, FormViews, Input, H2, P, Span, Error, FormField }\n"],"names":["DisplayingErrorMessagesSchema","Yup","shape","username","min","max","required","email","password","matches","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","authOperations","errors","touched","handleChange","handleBlur","handleSubmit","name","type","onChange","value","onBlur","placeholder","className","FormViews","styled","Formik","FormField","Form","ButtonViews","Div","P","Title","H2","Container","Input","Field","Span","Error"],"sourceRoot":""}