{"version":3,"file":"static/js/524.2f7ca9ba.chunk.js","mappings":"mQAGMA,EAASC,EAAAA,EAAAA,OAAH,yWAkBNC,EAAQD,EAAAA,EAAAA,MAAH,qGAMLE,EAAWF,EAAAA,EAAAA,KAAH,sMAWRG,EAAQH,EAAAA,EAAAA,MAAH,8LAcLI,EAAOJ,EAAAA,EAAAA,KAAH,8G,4BC5CGK,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,gBAEvBC,EAAmB,SAAAC,GACvB,MAAwBA,EAAMC,OAAtBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MACd,OAAQZ,GACN,IAAK,OACHC,EAAQW,GACR,MACF,IAAK,SACHT,EAAUS,GACV,MACF,QACE,OAEL,EAEKC,ECTK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAON,CACR,CDPYS,GAmBLC,EAAY,WAChBtB,EAAQ,IACRE,EAAU,GACX,EAEKqB,EAAe,WACnB,OAAKxB,GAASE,EAvBkB,SAACF,GAClC,IAAMyB,IAAkBnB,EAASoB,MAAK,SAACC,GAAD,OAAUA,EAAK3B,KAAK4B,gBAAkB5B,EAAK4B,aAA3C,IAErC,OADAH,GAAiBI,MAAM,GAAD,OAAI7B,EAAJ,0BACdyB,CACT,CAuBQK,CAAyB9B,IAH9B6B,MAAM,wBACC,EAGV,EAED,OAEI,UAAClC,EAAD,CAAUoC,SA3BO,SAACC,GACpBA,EAAEC,iBACsBT,KAExBpB,EAAS8B,EAAAA,GAAAA,WAA8B,CAAErB,GAAAA,EAAIb,KAAAA,EAAME,OAAAA,KACnDqB,KAGAA,GAED,EAiBG,WACE,UAAC7B,EAAD,CAAOyC,QAAStB,EAAhB,WACE,SAAChB,EAAD,UAAM,YACN,SAACD,EAAD,CACEwC,KAAK,OACLpC,KAAK,OACLY,MAAOZ,EACPa,GAAIA,EACJwB,SAAU5B,EACV6B,YAAY,qBACZC,QAAQ,yHACRC,MAAM,yIAAyIC,UAAQ,EAACC,UAAW,QAIvK,UAAChD,EAAD,CAAOyC,QAAQ,GAAf,WACE,SAACtC,EAAD,UAAM,cACN,SAACD,EAAD,CACEwC,KAAK,MACLpC,KAAK,SACLY,MAAOV,EACPmC,SAAU5B,EACV6B,YAAY,uBACZC,QAAQ,yFACRC,MAAM,+FAA+FC,UAAQ,QAGjH,SAACjD,EAAD,CAAQ4C,KAAK,SAAb,SAAsB,kBAI7B,E,UE3FYO,EAAKlD,EAAAA,EAAAA,GAAH,mQAYFD,EAASC,EAAAA,EAAAA,OAAH,wWAkBNI,EAAOJ,EAAAA,EAAAA,KAAH,0GC5BJmD,EAAkB,SAAC,GAA0B,IAAxB/B,EAAuB,EAAvBA,GAAIb,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAClCE,GAAWC,EAAAA,EAAAA,MACb,OACA,UAACsC,EAAD,YACQ,SAAC,EAAD,WAAM,uBAAI3C,OACV,SAAC,EAAD,UAAOE,KACP,SAAC,EAAD,CAAQkC,KAAK,SAASS,QAAS,kBAAKzC,EAAS8B,EAAAA,GAAAA,cAAiCrB,GAA/C,EAA/B,SAAoF,aAInG,ECZYiC,EAAKrD,EAAAA,EAAAA,GAAH,gT,UCGFsD,EAAc,WACvB,IAAMC,GAAqBzC,EAAAA,EAAAA,IAAY0C,EAAAA,GACvC,OAAwB,IAArBD,EAA+B,MAE1B,SAACF,EAAD,UACKE,EAAmBE,KAAI,SAAAvB,GACpB,IAAQd,EAAOc,EAAPd,GACR,OACI,SAAE+B,GAAF,UAEIjB,GADKd,EAGhB,KAEX,ECjBAjB,EAAQH,EAAAA,EAAAA,MAAH,4LAYLI,EAAOJ,EAAAA,EAAAA,KAAH,8GAMJC,EAAQD,EAAAA,EAAAA,MAAH,qKASL0D,EAAM1D,EAAAA,EAAAA,IAAH,2D,SCvBI2D,EAAS,WACjB,IAAMC,GAAS9C,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,cACtBJ,GAAWC,EAAAA,EAAAA,MACb,OACI,SAAC8C,EAAD,WACI,UAAC,EAAD,YACI,SAAC,EAAD,UAAM,0BACV,SAAC,EAAD,CAAOf,KAAK,OACZpC,KAAK,SACLY,MAAOyC,EACPhB,SAAU,SAACL,GAAD,OAAQ5B,GAASkD,EAAAA,EAAAA,GAAUtB,EAAErB,OAAOC,OAApC,EACV0B,YAAY,8BAIvB,ECQL,EApBoB,WAChB,IAAMlC,GAAWC,EAAAA,EAAAA,MACXkD,GAAYhD,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,iBACxBgD,GAAQjD,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,aAM1B,OAJAiD,EAAAA,EAAAA,YAAU,WACNrD,EAAS8B,EAAAA,GAAAA,gBACZ,GAAE,CAAC9B,KAGA,UAAC,KAAD,YACI,SAAC,KAAD,UAAO,eACP,SAACN,EAAD,KACA,SAAC,EAAA4D,GAAD,UAAI,cACJ,SAACN,EAAD,IACCG,IAAcC,IAAS,uBAAG,4BAC3B,SAACT,EAAD,MAGX,C,4OCzBKI,EAAM1D,EAAAA,EAAAA,IAAH,sNAWHkE,EAAIlE,EAAAA,EAAAA,EAAH,qNAYDmE,EAAQnE,EAAAA,EAAAA,GAAH,iIAOLiE,EAAKjE,EAAAA,EAAAA,GAAH,+HAOFoE,EAAYpE,EAAAA,EAAAA,IAAH,mGAOTI,EAAOJ,EAAAA,EAAAA,KAAH,kJAUJqE,EAAQrE,EAAAA,EAAAA,IAAH,iH","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/ContactList/ContactListItem.styled.js","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","views/ContactView.js","views/views.styled.js"],"sourcesContent":["import styled from '@emotion/styled';\n// import { Form, Field } from 'formik';\n\nconst Button = styled.button`\n  background-color: #333333;\n  margin: 10px;\n  padding: 10px 25px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }\n`\nconst Label = styled.label`\nfont-weight: bold;\nfont-size: 20px;\ndisplay:flex;\nflex-direction:column;\n`\nconst FormView = styled.form`\nmax-width:400px;\nborder: 1px solid #2A363B;\n\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }\n`\n\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\n\nexport { Input, FormView, Label, Button, Span }\n\n","import React, { useState } from 'react';\n// import { Formik, ErrorMessage } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { Input, Label, FormView, Button, Span } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelector } from 'redux/contacts';\n\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelector.selectContacts);\n\n  const handleChangeForm = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const id = nanoid();\n\n   const handelCheckUniqueContact = (name) => {\n   const isNameContact = !!contacts.find((item) => item.name.toLowerCase() === name.toLowerCase());\n    isNameContact && alert(`${name} is already in items`)\n    return !isNameContact\n  }\n  const handelSubmit = (e) => {\n    e.preventDefault();\n    const isValidatedForm = validateForm();\nif (isValidatedForm) {\n    dispatch(contactsOperations.addContact({ id, name, number }));\n    resetForm();\n    }\n  else {\n    resetForm();\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const validateForm = () => {\n    if (!name || !number) {\n      alert('Some field is empty');\n      return false;\n    }\n    return handelCheckUniqueContact(name);\n  };\n\n  return (\n    \n      <FormView onSubmit={handelSubmit}>\n        <Label htmlFor={id}>\n          <Span>Name :</Span>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id={id}\n            onChange={handleChangeForm}\n            placeholder=\"Enter contact name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" required minLength={2}\n          />\n         \n        </Label>\n        <Label htmlFor=\"\">\n          <Span>Number :</Span>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChangeForm}\n            placeholder=\"Enter contact number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\" required />\n         \n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormView>\n    \n  );\n};\n\n\n\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const Li = styled.li`\n\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 5px;\nalign-items: center;\n  gap: 5px;\n  color: #F5FFFA;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);`\n\nexport const Button = styled.button`\n\n background-color: #333333;\n  margin: 10px;\n  padding: 10px 15px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }`\nexport const Span = styled.span`\n  font-weight: 400;\n  padding: 10px;\n  list-style: none;\n  display: flex;\n  \n`\n\n","import {  Button, Span,Li } from './ContactListItem.styled';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactListItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n        return (\n        <Li>\n                <Span><b>{name}</b></Span>\n                <Span>{number}</Span>\n                <Button type=\"button\" onClick={()=> dispatch(contactsOperations.deleteContact(id))}>Delete</Button>\n            \n        </Li>\n    )\n}\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\n  min-width: 300px;\n padding-left: 0px;\n  border-collapse: collapse;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  /* margin-right: 0; */\n  gap: 5px;\n  color: #f5fffa;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);\n`;\n\n","import {ContactListItem} from \"./ContactListItem\";\nimport { Ul } from './ContactList.styled';\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { useSelector } from \"react-redux\";\n\nexport const ContactList = () => {\n    const getVisibleContacts = useSelector(selectVisibleContacts);\n    if(getVisibleContacts===0) return null\n    return (\n            <Ul>\n                {getVisibleContacts.map(item => {\n                    const { id } = item\n                    return (\n                        < ContactListItem\n                            key={id}\n                        {...item}\n                     />)    \n                })}\n            </Ul>\n    )}\n    \n\n\n","import styled from '@emotion/styled';\n\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }`\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\nconst Label = styled.label`\npadding: 20px;\nfont-weight: bold;\ndisplay:flex;\nflex-direction:column;\ngap:10px;\nalign-items:flex-start;\njustify-content: flex-start;\n`\nconst Div = styled.div`\ndisplay: flex;\ntext-align: center;`\nexport { Span, Label, Input, Div }","import { Input, Label, Span, Div } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/contacts';\nimport { setFilter } from 'redux/contacts/createSlice';\n\n\nexport const Filter = () => {\n     const filter = useSelector(contactsSelector.selectFilter);\n    const dispatch = useDispatch();\n        return (\n            <Div>\n                <Label>\n                    <Span>Find contact by name</Span>\n                <Input type=\"text\" \n                name='filter'\n                value={filter}\n                onChange={(e)  => dispatch(setFilter(e.target.value))}\n                placeholder=\"Enter name for Search\"/>\n                </Label>\n            </Div>\n        )\n    }\n","import { useEffect } from 'react';\nimport { Container, Title, H2 } from './views.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { contactsOperations, contactsSelector } from '../redux/contacts';\n\n\nconst ContactView = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(contactsSelector.selectIsLoading);\n    const error = useSelector(contactsSelector.selectError);\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Container>\n            <Title>Phonebook</Title>\n            <ContactForm />\n            <H2>Contacts</H2>\n            <Filter />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList />\n        </Container>\n    )\n}\nexport default ContactView;\n\n","import styled from '@emotion/styled';\n\n\nconst Div = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin-top: 20px;\nalign-items: center;\ncolor: #F5FFFA;\nmargin-left: auto;\nmargin-right: auto;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst P = styled.p`\nbackground-color: rgba(0, 0, 0, 0.3);\nfont-weight: 500;\nmax-width: 200px; \nborder-radius: 10px;\npadding: 5px;\ntext-align: center;\nborder:1px solid black;\n&:hover{\ncolor: #e9d362;\n}`\n\nconst Title = styled.h1`\nfont-weight: 900;\nmargin: 15px 0px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst H2 = styled.h2`\nfont-weight: 400;\nmargin: 10px 0;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\n\n  `\nconst Container = styled.div`\n\n    display: flex;\nalign-items: center;\nflex-direction: column;\n    \n`\nconst Span = styled.span`\n margin-top: 15px;\n font-weight: 500;\n \n &:hover{\n\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\ncolor: #e9d362;\n}`\n\nconst Error = styled.div`\n  color: #fc8181;\n  font-size: 0.75rem;\n  text-align: left;\n  margin-top: 0.25rem;\n\n `\n\nexport { Container, Title, Div, H2, P, Error, Span }\n"],"names":["Button","styled","Label","FormView","Input","Span","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelector","handleChangeForm","event","target","value","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","resetForm","validateForm","isNameContact","find","item","toLowerCase","alert","handelCheckUniqueContact","onSubmit","e","preventDefault","contactsOperations","htmlFor","type","onChange","placeholder","pattern","title","required","minLength","Li","ContactListItem","onClick","Ul","ContactList","getVisibleContacts","selectVisibleContacts","map","Div","Filter","filter","setFilter","isLoading","error","useEffect","H2","P","Title","Container","Error"],"sourceRoot":""}