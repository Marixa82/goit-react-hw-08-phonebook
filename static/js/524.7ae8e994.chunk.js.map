{"version":3,"file":"static/js/524.7ae8e994.chunk.js","mappings":"mQAGMA,EAASC,EAAAA,EAAAA,OAAH,yWAkBNC,EAAQD,EAAAA,EAAAA,MAAH,qGAMLE,EAAWF,EAAAA,EAAAA,KAAH,sMAWRG,EAAQH,EAAAA,EAAAA,MAAH,8LAcLI,EAAOJ,EAAAA,EAAAA,KAAH,8G,UC9CGK,EAAc,SAACC,GAC1B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAmB,SAAAC,GACvB,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MACF,IAAK,SACHJ,EAAUI,GACV,MACF,QACE,OAEL,EAEKC,ECLK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAON,CACR,CDXYS,GAaLC,EAAY,WAChBjB,EAAQ,IACRE,EAAU,GACX,EAEKgB,EAAe,WACnB,IAAQC,EAAkBtB,EAAlBsB,cACR,OAAKpB,GAASE,EAIPkB,EAAcpB,IAHnBqB,MAAM,wBACC,EAGV,EAED,OAEI,UAAC3B,EAAD,CAAU4B,SA3BO,SAACC,GACpBA,EAAEC,iBACF,IAAQC,EAAU3B,EAAV2B,MACgBN,MAGtBM,EAAM,CAAEjB,GAAAA,EAAIR,KAAAA,EAAME,OAAAA,IAClBgB,IAEH,EAkBG,WACE,UAACzB,EAAD,CAAOiC,QAASlB,EAAhB,WACE,SAACZ,EAAD,UAAM,YACN,SAACD,EAAD,CACEgC,KAAK,OACL3B,KAAK,OACLO,MAAOP,EACPQ,GAAIA,EACJoB,SAAUxB,EACVyB,YAAY,qBACZC,QAAQ,yHACRC,MAAM,yIAAyIC,UAAQ,EAACC,UAAW,QAIvK,UAACxC,EAAD,CAAOiC,QAAQ,GAAf,WACE,SAAC9B,EAAD,UAAM,cACN,SAACD,EAAD,CACEgC,KAAK,MACL3B,KAAK,SACLO,MAAOL,EACP0B,SAAUxB,EACVyB,YAAY,uBACZC,QAAQ,yFACRC,MAAM,+FAA+FC,UAAQ,QAGjH,SAACzC,EAAD,CAAQoC,KAAK,SAAb,SAAsB,kBAI7B,E,UElFYO,EAAK1C,EAAAA,EAAAA,GAAH,mQAYFD,EAASC,EAAAA,EAAAA,OAAH,wWAkBNI,EAAOJ,EAAAA,EAAAA,KAAH,0G,oBC1BJ2C,EAAkB,SAAC,GAA0B,IAAxB3B,EAAuB,EAAvBA,GAAIR,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAClCkC,GAAWC,EAAAA,EAAAA,MACb,OACA,UAACH,EAAD,YAEQ,SAAC,EAAD,WAAM,uBAAIlC,OACV,SAAC,EAAD,UAAOE,KACP,SAAC,EAAD,CAAQyB,KAAK,SAASW,QAAS,kBAAKF,EAASG,EAAAA,GAAAA,cAAiC/B,GAA/C,EAA/B,SAAoF,aAInG,ECfYgC,EAAKhD,EAAAA,EAAAA,GAAH,gTCEFiD,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,MAC1B,OAAkB,IAAfA,EAAMC,OAAmB,MAEpB,SAACH,EAAD,UACKE,EAAME,KAAI,SAAAC,GACP,IAAQrC,EAAOqC,EAAPrC,GACR,OACI,SAAE2B,GAAF,UAEIU,GADKrC,EAGhB,KAEX,ECfAb,EAAQH,EAAAA,EAAAA,MAAH,4LAYLI,EAAOJ,EAAAA,EAAAA,KAAH,8GAMJC,EAAQD,EAAAA,EAAAA,MAAH,qKASLsD,EAAMtD,EAAAA,EAAAA,IAAH,2DCzBKuD,EAAS,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQpB,EAAc,EAAdA,SACzB,OACI,SAACkB,EAAD,WACI,UAAC,EAAD,YACI,SAAC,EAAD,UAAM,0BACV,SAAC,EAAD,CAAOnB,KAAK,OACZ3B,KAAK,SACLO,MAAOyC,EACPpB,SAAU,gBAAEtB,EAAF,EAAEA,OAAF,OAAesB,EAAStB,EAAOC,MAA/B,EACVsB,YAAY,8BAIvB,E,SCkCL,EA1CoB,WAChB,IAAMO,GAAWC,EAAAA,EAAAA,MACXY,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,gBACvBH,GAASE,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,cACrBC,GAAYF,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,iBACxBE,GAAQH,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,cAO1BG,EAAAA,EAAAA,YAAU,WACNlB,EAASG,EAAAA,GAAAA,gBACZ,GAAE,CAACH,IAiBJ,OACI,UAAC,KAAD,YACI,SAAC,KAAD,UAAO,eACP,SAACvC,EAAD,CAAa4B,MA3BI,SAAC8B,GACtBnB,EAASG,EAAAA,GAAAA,WAA8BgB,GAC1C,EAyB6CnC,cAlBb,SAACpB,GAC9B,IAAMwD,IAAkBP,EAASQ,MAAK,SAACZ,GAAD,OAAUA,EAAK7C,OAASA,CAAxB,IAEtC,OADAwD,GAAiBnC,MAAM,GAAD,OAAIrB,EAAJ,0BACdwD,CACX,KAeO,SAAC,EAAAE,GAAD,UAAI,cACJ,SAACX,EAAD,CAAQC,OAAQA,EAAQpB,SARL,SAACL,GACxBa,GAASuB,EAAAA,EAAAA,GAAUpC,GACtB,IAOQ6B,IAAcC,IAAS,uBAAG,4BAC3B,SAACZ,EAAD,CAAaC,MAfVO,EAASD,QAAO,SAAAH,GAAI,OACvBA,EAAK7C,KAAK4D,cAAcC,SAAUb,GAAUA,EAAOY,eAAkB,GAD9C,QAkBlC,C,8VCnCKE,GAAYtE,EAAAA,EAAAA,GAAOuE,EAAAA,GAAPvE,CAAH,2PAaTwE,EAAYxE,EAAAA,EAAAA,KAAH,0OAYTyE,EAAczE,EAAAA,EAAAA,OAAH,yWAmBXsD,EAAMtD,EAAAA,EAAAA,IAAH,iPAYH0E,EAAI1E,EAAAA,EAAAA,EAAH,qNAYD2E,EAAQ3E,EAAAA,EAAAA,GAAH,iIAOLkE,EAAKlE,EAAAA,EAAAA,GAAH,+HAOF4E,EAAY5E,EAAAA,EAAAA,IAAH,mGAkCTG,EAAQH,EAAAA,EAAAA,MAAH,gMAaLI,EAAOJ,EAAAA,EAAAA,KAAH,kJAUJ6E,EAAQ7E,EAAAA,EAAAA,IAAH,iH","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/ContactList/ContactListItem.styled.js","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","views/ContactView.js","views/views.styled.js"],"sourcesContent":["import styled from '@emotion/styled';\n// import { Form, Field } from 'formik';\n\nconst Button = styled.button`\n  background-color: #333333;\n  margin: 10px;\n  padding: 10px 25px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }\n`\nconst Label = styled.label`\nfont-weight: bold;\nfont-size: 20px;\ndisplay:flex;\nflex-direction:column;\n`\nconst FormView = styled.form`\nmax-width:400px;\nborder: 1px solid #2A363B;\n\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }\n`\n\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\n\nexport { Input, FormView, Label, Button, Span }\n\n","import React, { useState } from 'react';\n// import { Formik, ErrorMessage } from 'formik';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { Input, Label, FormView, Button, Span } from './ContactForm.styled';\n\nexport const ContactForm = (props) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChangeForm = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const id = nanoid();\n\n  const handelSubmit = (e) => {\n    e.preventDefault();\n    const { onAdd } = props;\n    const isValidatedForm = validateForm();\n\n    if (isValidatedForm) {\n      onAdd({ id, name, number });\n      resetForm();\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const validateForm = () => {\n    const { onCheckUnique } = props;\n    if (!name || !number) {\n      alert('Some field is empty');\n      return false;\n    }\n    return onCheckUnique(name);\n  };\n\n  return (\n    \n      <FormView onSubmit={handelSubmit}>\n        <Label htmlFor={id}>\n          <Span>Name :</Span>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id={id}\n            onChange={handleChangeForm}\n            placeholder=\"Enter contact name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" required minLength={2}\n          />\n         \n        </Label>\n        <Label htmlFor=\"\">\n          <Span>Number :</Span>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChangeForm}\n            placeholder=\"Enter contact number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\" required />\n         \n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormView>\n    \n  );\n};\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  onCheckUnique: PropTypes.func.isRequired,\n};\n\n\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const Li = styled.li`\n\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 5px;\nalign-items: center;\n  gap: 5px;\n  color: #F5FFFA;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);`\n\nexport const Button = styled.button`\n\n background-color: #333333;\n  margin: 10px;\n  padding: 10px 15px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }`\nexport const Span = styled.span`\n  font-weight: 400;\n  padding: 10px;\n  list-style: none;\n  display: flex;\n  \n`\n\n","\nimport {  Button, Span,Li } from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactListItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n        return (\n        <Li>\n            \n                <Span><b>{name}</b></Span>\n                <Span>{number}</Span>\n                <Button type=\"button\" onClick={()=> dispatch(contactsOperations.deleteContact(id))}>Delete</Button>\n            \n        </Li>\n    )\n}\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  \n}\n","import styled from '@emotion/styled';\n\nexport const Ul = styled.ul`\n  min-width: 300px;\n padding-left: 0px;\n  border-collapse: collapse;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  /* margin-right: 0; */\n  gap: 5px;\n  color: #f5fffa;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);\n`;\n\n","import PropTypes from 'prop-types';\nimport {ContactListItem} from \"./ContactListItem\";\nimport { Ul } from './ContactList.styled';\n\nexport const ContactList = ({ items}) => {\n    if(items.length===0) return null\n    return (\n            <Ul>\n                {items.map(item => {\n                    const { id } = item\n                    return (\n                        < ContactListItem\n                            key={id}\n                        {...item}\n                     />)    \n                })}\n            </Ul>\n    )}\n    \n\n    ContactList.propTypes = {\n    items: PropTypes.array.isRequired,\n    \n }\n","import styled from '@emotion/styled';\n\nconst Input = styled.input`\nfont-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }`\nconst Span = styled.span`\nmargin-bottom: 5px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n`\nconst Label = styled.label`\npadding: 20px;\nfont-weight: bold;\ndisplay:flex;\nflex-direction:column;\ngap:10px;\nalign-items:flex-start;\njustify-content: flex-start;\n`\nconst Div = styled.div`\ndisplay: flex;\ntext-align: center;`\nexport { Span, Label, Input, Div }","import { Input, Label, Span, Div } from './Filter.styled';\nimport PropTypes from 'prop-types';\n\n\nexport  const Filter = ({filter, onChange}) => {\n        return (\n            <Div>\n                <Label>\n                    <Span>Find contact by name</Span>\n                <Input type=\"text\" \n                name='filter'\n                value={filter}\n                onChange={({target})  => onChange(target.value)}\n                placeholder=\"Enter name for Search\"/>\n                </Label>\n            </Div>\n        )\n    }\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n }","import { useEffect } from 'react';\nimport { Container, Title, H2 } from './views.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { contactsOperations, contactsSelector } from '../redux/contacts';\nimport { setFilter } from 'redux/contacts/createSlice';\n\nconst ContactView = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(contactsSelector.selectContacts)\n    const filter = useSelector(contactsSelector.selectFilter);\n    const isLoading = useSelector(contactsSelector.selectIsLoading);\n    const error = useSelector(contactsSelector.selectError);\n\n    const handleAddContact = (data) => {\n        dispatch(contactsOperations.addContact(data));\n    };\n\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    const handelCheckUniqueContact = (name) => {\n        const isNameContact = !!contacts.find((item) => item.name === name)\n        isNameContact && alert(`${name} is already in items`)\n        return !isNameContact\n    }\n\n    function getVisibleContact() {\n        return contacts.filter(item =>\n            item.name.toLowerCase().includes((filter && filter.toLowerCase()) || \"\")\n        );\n    }\n\n    const handleFilterChange = (e) => {\n        dispatch(setFilter(e));\n    };\n    return (\n        <Container>\n            <Title>Phonebook</Title>\n            <ContactForm onAdd={handleAddContact} onCheckUnique={handelCheckUniqueContact} />\n            <H2>Contacts</H2>\n            <Filter filter={filter} onChange={handleFilterChange} />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList items={getVisibleContact()} />\n        </Container>\n    )\n}\nexport default ContactView;\n\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\n\n// const FormViews = styled(Formik)`\n// text-align: center;\n// max-width:250px;\n// border: 1px solid black;\n// padding:20px;\n// border-radius: 10px;\n// display:flex;\n// flex-direction:column;\n// gap:10px;\n// background-color: rgba(0, 0, 0, 0.3);\n// `\nconst FormField = styled(Form)`\ntext-align: center;\n width: 95%;\n  max-width: 400px;\n  margin: 0 auto;\nborder: 1px solid black;\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:10px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst FormViews = styled.form`\ntext-align: center;\nmax-width:250px;\nborder: 1px solid black;\nmargin-left:20px;\npadding:20px;\nborder-radius: 10px;\ndisplay:flex;\nflex-direction:column;\ngap:20px;\nbackground-color: rgba(0, 0, 0, 0.3);\n`\nconst ButtonViews = styled.button`\n  background-color: #333333;\n  margin: 10px;\n  padding: 10px 25px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: #F5FFFA;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n\n  &:hover {\n    background-color:#e9d362;\n    color: #333333;\n    text-decoration: none;\n  }\n`;\n\nconst Div = styled.div`\ndisplay: flex;\nflex-direction: column;\nmargin-top: 20px;\nalign-items: center;\n/* text-align: center; */\ncolor: #F5FFFA;\nmargin-left: auto;\nmargin-right: auto;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst P = styled.p`\nbackground-color: rgba(0, 0, 0, 0.3);\nfont-weight: 500;\nmax-width: 200px; \nborder-radius: 10px;\npadding: 5px;\ntext-align: center;\nborder:1px solid black;\n&:hover{\ncolor: #e9d362;\n}`\n\nconst Title = styled.h1`\nfont-weight: 500;\nmargin: 15px 0px;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n\n  `\nconst H2 = styled.h2`\nfont-weight: 400;\nmargin: 10px 0;\ncolor: #F5FFFA;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\n\n  `\nconst Container = styled.div`\n\n    display: flex;\nalign-items: center;\nflex-direction: column;\n    \n`\n// const Input = styled(Field)`\n//  /* font-size: 10px;\n// width:200px;\n// height:20px;\n// border-radius: 5px;\n// border: none;\n// outline:none; */\n// width: 100%;\n//   padding: 0.65rem 0.5rem;\n//   font-size: 1rem;\n//   color: #2d3748;\n//   border: 2px solid #4a5568;\n//   /* background-color: #2d3748; */\n//   border-radius: 10px;\n//   outline: none;\n// &:focus {\n//   /* background-color: #e9d362;\n//     color: #333333; */\n//     border-color: #4299e1;\n//   };\n//   &::grammar-error{\n//      border-color: #fc8181;\n//   }\n//   &::placeholder {\n//     color: #a0aec0;\n//   }\n//  `\nconst Input = styled.input`\n font-size: 10px;\nwidth:200px;\nheight:20px;\nborder-radius: 5px;\nborder: none;\noutline:none;\n\n&:hover {\n  background-color: #e9d362;\n    color: #333333;\n  }\n `\nconst Span = styled.span`\n margin-top: 15px;\n font-weight: 500;\n \n &:hover{\n\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);\ncolor: #e9d362;\n}`\n\nconst Error = styled.div`\n  color: #fc8181;\n  font-size: 0.75rem;\n  text-align: left;\n  margin-top: 0.25rem;\n\n `\n\nexport { Container, Title, Div, ButtonViews, FormViews, Input, H2, P, Span, Error, FormField }\n"],"names":["Button","styled","Label","FormView","Input","Span","ContactForm","props","useState","name","setName","number","setNumber","handleChangeForm","event","target","value","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","resetForm","validateForm","onCheckUnique","alert","onSubmit","e","preventDefault","onAdd","htmlFor","type","onChange","placeholder","pattern","title","required","minLength","Li","ContactListItem","dispatch","useDispatch","onClick","contactsOperations","Ul","ContactList","items","length","map","item","Div","Filter","filter","contacts","useSelector","contactsSelector","isLoading","error","useEffect","data","isNameContact","find","H2","setFilter","toLowerCase","includes","FormField","Form","FormViews","ButtonViews","P","Title","Container","Error"],"sourceRoot":""}